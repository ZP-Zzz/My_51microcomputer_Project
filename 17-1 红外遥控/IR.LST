C51 COMPILER V9.01   IR                                                                    05/23/2021 13:50:03 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE IR
OBJECT MODULE PLACED IN IR.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE IR.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <REGX52.H>
   2          #include "timer0.H"
   3          #include "INT0.H" 
   4          
   5          /*IR_State=0表示空闲状态
   6            IR_State=1表示进入Start状态或者repeat状态
   7            IR_State=2表示开始解码   32bit数据解码   进行32次
   8          */
   9          
  10          unsigned int IR_Time;
  11          unsigned char IR_State;
  12          unsigned char IR_Data[4];
  13          unsigned char IR_pData;
  14          unsigned char IR_DataFlag,IR_RepeatFlag,IR_Address,IR_Command;
  15          
  16          
  17          void IR_Init(void)
  18          {
  19   1              Timer0Init();
  20   1              Int0_Init();
  21   1      }
  22          
  23          
  24          unsigned char IR_GetDataFlag(void)
  25          {
  26   1              if(IR_DataFlag)
  27   1              {
  28   2                      IR_DataFlag=0;
  29   2                      return 1;
  30   2              }
  31   1              return 0;
  32   1      }
  33          
  34          
  35          
  36          
  37          unsigned char IR_GetRepeatFlag(void)
  38          {
  39   1              if(IR_RepeatFlag)
  40   1              {
  41   2                      IR_RepeatFlag=0;
  42   2                      return 1;
  43   2              }
  44   1              return 0;
  45   1      }
  46          
  47          
  48          
  49          unsigned char IR_GetAddress(void)
  50          {
  51   1              return IR_Address;
  52   1      }
  53          
  54          unsigned char IR_GetCommand(void)
  55          {
C51 COMPILER V9.01   IR                                                                    05/23/2021 13:50:03 PAGE 2   

  56   1              return IR_Command;
  57   1      }
  58          
  59          
  60          
  61          void Int0_Routine(void) interrupt 0
  62          {
  63   1              if(IR_State==0)                         //状态0，空闲状态
  64   1              {
  65   2                      Timer0_SetCounter(0);   //定时计数器清0
  66   2                      Timer0_Run(1);                  //定时器启动
  67   2                      IR_State=1;                             //置状态为1
  68   2              }
  69   1              else if(IR_State==1)            //状态1，等待Start信号或Repeat信号
  70   1              {
  71   2                      IR_Time=Timer0_GetCounter();    //获取上一次中断到此次中断的时间
  72   2                      Timer0_SetCounter(0);   //定时计数器清0
  73   2                      //如果计时为13.5ms，则接收到了Start信号（判定值在12MHz晶振下为13500，在11.0592MHz晶振下为12442）
  74   2                      if(IR_Time>13500-500 && IR_Time<13500+500)
  75   2                      {
  76   3                              IR_State=2;                     //置状态为2
  77   3                      }
  78   2                      //如果计时为11.25ms，则接收到了Repeat信号（判定值在12MHz晶振下为11250，在11.0592MHz晶振下为10368）
  79   2                      else if(IR_Time>11250-500 && IR_Time<11250+500)
  80   2                      {
  81   3                              IR_RepeatFlag=1;        //置收到连发帧标志位为1
  82   3                              Timer0_Run(0);          //定时器停止
  83   3                              IR_State=0;                     //置状态为0
  84   3                      }
  85   2                      else                                    //接收出错
  86   2                      {
  87   3                              IR_State=1;                     //置状态为1
  88   3                      }
  89   2              }
  90   1              else if(IR_State==2)            //状态2，接收数据
  91   1              {
  92   2                      IR_Time=Timer0_GetCounter();    //获取上一次中断到此次中断的时间
  93   2                      Timer0_SetCounter(0);   //定时计数器清0
  94   2                      //如果计时为1120us，则接收到了数据0（判定值在12MHz晶振下为1120，在11.0592MHz晶振下为1032）
  95   2                      if(IR_Time>1120-500 && IR_Time<1120+500)
  96   2                      {
  97   3                              IR_Data[IR_pData/8]&=~(0x01<<(IR_pData%8));     //数据对应位清0
  98   3                              IR_pData++;                     //数据位置指针自增
  99   3                      }
 100   2                      //如果计时为2250us，则接收到了数据1（判定值在12MHz晶振下为2250，在11.0592MHz晶振下为2074）
 101   2                      else if(IR_Time>2250-500 && IR_Time<2250+500)
 102   2                      {
 103   3                              IR_Data[IR_pData/8]|=(0x01<<(IR_pData%8));      //数据对应位置1
 104   3                              IR_pData++;                     //数据位置指针自增
 105   3                      }
 106   2                      else                                    //接收出错
 107   2                      {
 108   3                              IR_pData=0;                     //数据位置指针清0
 109   3                              IR_State=1;                     //置状态为1
 110   3                      }
 111   2                      if(IR_pData>=32)                //如果接收到了32位数据
 112   2                      {
 113   3                              IR_pData=0;                     //数据位置指针清0
 114   3                              if((IR_Data[0]==~IR_Data[1]) && (IR_Data[2]==~IR_Data[3]))      //数据验证
 115   3                              {
 116   4                                      IR_Address=IR_Data[0];  //转存数据
 117   4                                      IR_Command=IR_Data[2];
C51 COMPILER V9.01   IR                                                                    05/23/2021 13:50:03 PAGE 3   

 118   4                                      IR_DataFlag=1;  //置收到连发帧标志位为1
 119   4                              }
 120   3                              Timer0_Run(0);          //定时器停止
 121   3                              IR_State=0;                     //置状态为0
 122   3                      }
 123   2              }
 124   1      }
 125          
 126          
 127          
 128          
 129          
 130          
 131          
 132          
 133          
 134          
 135          
 136          
 137          
 138          
 139          
 140          
 141          
 142          
 143          
 144          
 145          
 146          
 147          
 148          
 149          
 150          
 151          
 152          
 153          
 154          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    373    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
